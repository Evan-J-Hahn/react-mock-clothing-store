{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyDIvpnmZxhogoT0lsrn1Rfsa-L-nVPDjjQ\",\n  authDomain: \"crown-db-2798f.firebaseapp.com\",\n  databaseURL: \"https://crown-db-2798f.firebaseio.com\",\n  projectId: \"crown-db-2798f\",\n  storageBucket: \"crown-db-2798f.appspot.com\",\n  messagingSenderId: \"38513890340\",\n  appId: \"1:38513890340:web:a9c642e46f7d13ef58b4b1\",\n  measurementId: \"G-3P3878TGFN\"\n};\nfirebase.initializeApp(config);\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport default firebase;","map":{"version":3,"sources":["C:/Users/evanh/Desktop/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","provider","auth","GoogleAuthProvider","setCustomParameters","prompt","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyDIvpnmZxhogoT0lsrn1Rfsa-L-nVPDjjQ\",\r\n  authDomain: \"crown-db-2798f.firebaseapp.com\",\r\n  databaseURL: \"https://crown-db-2798f.firebaseio.com\",\r\n  projectId: \"crown-db-2798f\",\r\n  storageBucket: \"crown-db-2798f.appspot.com\",\r\n  messagingSenderId: \"38513890340\",\r\n  appId: \"1:38513890340:web:a9c642e46f7d13ef58b4b1\",\r\n  measurementId: \"G-3P3878TGFN\"\r\n}\r\n\r\nfirebase.initializeApp(config)\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider()\r\nprovider.setCustomParameters({ prompt: 'select_account' })\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`)\r\n  const snapShot = await userRef.get()\r\n\r\n  if (!snapShot.exists) {\r\n    const { displayName, email } = userAuth\r\n    const createdAt = new Date()\r\n\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData\r\n      })\r\n    } catch (error) {\r\n      console.log('error creating user', error.message)\r\n    }\r\n  }\r\n\r\n  return userRef\r\n}\r\n\r\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n  const collectionRef = firestore.collection(collectionKey)\r\n  const batch = firestore.batch()\r\n\r\n  objectsToAdd.forEach((obj) => {\r\n    const newDocRef = collectionRef.doc()\r\n    batch.set(newDocRef, obj)\r\n  })\r\n\r\n  return await batch.commit()\r\n}\r\n\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n  const transformedCollection = collections.docs.map((doc) => {\r\n    const { title, items } = doc.data()\r\n\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: doc.id,\r\n      title,\r\n      items\r\n    }\r\n  })\r\n\r\n  return transformedCollection.reduce((accumulator, collection) => {\r\n    accumulator[collection.title.toLowerCase()] = collection\r\n\r\n    return accumulator\r\n  }, {})\r\n}\r\n\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider)\r\nexport const auth = firebase.auth()\r\nexport const firestore = firebase.firestore()\r\n\r\nexport default firebase"]},"metadata":{},"sourceType":"module"}